// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  nickname   String?
  avatar     String?
  bio        String?
  role       String   @default("user")
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 关系
  articles Article[]
  comments Comment[]

  @@map("users")
}

model Category {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String?
  slug          String?  @unique
  article_count Int      @default(0)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // 关系
  articles Article[]

  @@map("categories")
}

model Tag {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String?
  slug          String?  @unique
  color         String?
  article_count Int      @default(0)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // 关系
  articles Article[] @relation("ArticleTags")

  @@map("tags")
}

model Article {
  id            Int      @id @default(autoincrement())
  title         String
  summary       String?
  content       String
  cover_image   String?
  slug          String?  @unique
  view_count    Int      @default(0)
  like_count    Int      @default(0)
  comment_count Int      @default(0)
  is_published  Boolean  @default(false)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // 外键
  author_id   Int
  category_id Int?

  // 关系
  author   User      @relation(fields: [author_id], references: [id])
  category Category? @relation(fields: [category_id], references: [id])
  tags     Tag[]     @relation("ArticleTags")
  comments Comment[]

  @@map("articles")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  like_count Int      @default(0)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 外键
  author_id  Int
  article_id Int
  parent_id  Int?

  // 关系
  author  User      @relation(fields: [author_id], references: [id])
  article Article   @relation(fields: [article_id], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}
